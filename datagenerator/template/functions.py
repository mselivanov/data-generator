"""
@author Maksim Selivanov
Module contains functions for generating data from template. 
"""

from random import randint
from random import seed
from uuid import uuid4
from string import ascii_letters
from functools import partial
import os
import re
from copy import deepcopy
from datetime import datetime
from datetime import date
from datetime import timedelta
import names
from random_words import RandomWords

from datagenerator.cache.cache import GLOBAL_CACHE

__PLACEHOLDER = re.compile('\$\{(.+)\}')
__SELF_REFERENCE = "SELF"
__RANDOM_WORDS = RandomWords()
from_template = None
from_configuration = None

# TODO: move object evaluation to dedicated module
# TODO: implement object evaluation using classes


def _random_char_sequence(num_of_symbols, char_base):
    """
    Returns string of random characters with a length of num_of_symbols from char_base
    """
    seed()
    seq_len = len(char_base)
    return ''.join([char_base[randint(0, seq_len-1)] for _ in range(num_of_symbols)])

def random_int(start, end):
    """
    Function generates random integer N such as start<=N<=end 
    """    
    seed()
    return randint(start, end)

def choose_element(element_list):
    """
    Function returns random element from the list
    """
    return element_list[random_int(0, len(element_list)-1)]
    
    
def alpha(num_of_symbols):
    """
    Returns string of random characters with a length of num_of_symbols
    """
    return _random_char_sequence(num_of_symbols, ascii_letters)

def random_word():
    return __RANDOM_WORDS.random_word()

def random_sentence(word_count):
    return " ".join(__RANDOM_WORDS.random_words(count = word_count))
    
def array(num_elements, element_func, *element_func_args):
    """
    Returns array of elements with a length of num_elements.
    Every element is generated by a call to element_func(*element_func_args).
    """
    return [element_func(*element_func_args) for _ in range(num_elements)]    

def random_uuid_string():    
    """
    Generates random UUID and returns it as a hex string: '12345678-1234-5678-1234-567812345678'
    """
    return str(uuid4())
    
def find_template(templates_list, template_name):
    """
    Function returns copy of a template with a name template_name from templates_list. 
    """
    result_list = [template for template in templates_list if template_name == template['name']]
    return deepcopy(result_list[0]) if result_list else {"template":{}} 

def find_configuration(configuration_list, configuration_name):
    """
    Function returns copy of a configuration with a name configuration_name from configuration_list. 
    """
    result_list = [configuration for configuration in configuration_list if configuration_name == configuration['name']]
    return deepcopy(result_list[0]) if result_list else {} 
    
def _from_template(templates_list, template_name):
    return evaluate_object(object_stub_from_template(templates_list, template_name))[0]
   
def _from_configuration(configuration_list, configuration_name):
    configuration = find_configuration(configuration_list, configuration_name)
    evaluate_object(configuration)
    return configuration    

def _init(templates):
    global from_template
    global from_configuration
    from_template = partial(_from_template, templates) 

def cache(entity_key, entity_type):
    """
    Function adds entity key to global cache
    """
    GLOBAL_CACHE.add_element(entity_type, entity_key)
    return entity_key

def is_in_cache(entity_type, entity_key):
    return GLOBAL_CACHE.probe(entity_type, entity_key)

def current_datetime():
    """
    Returns current datetime (local) in format YYYY-MM-DDTHH24:MI:SS.SSSSSS 
    """
    return datetime.isoformat(datetime.now())

def from_cache(entity_type):
    entity = GLOBAL_CACHE.get_least_used(entity_type)
    return entity.key

def random_from_cache(entity_type):
    entity = GLOBAL_CACHE.get_random(entity_type)    
    return entity.key

def random_full_name():
    return names.get_full_name()

def random_date(start_years_from_now, end_years_from_now):
    """
    Function returns random date in a period. Where: 
        - starting date is today plus start_years_from_now
        - ending date is today plus end_years_from_now
    """
    _today = datetime.today()
    start_date = _today.replace(year = _today.year + start_years_from_now)
    end_date = _today.replace(year = _today.year + end_years_from_now)
    random_date = start_date + timedelta(days = random_int(0, (end_date - start_date).days))
    return date.isoformat(random_date)

    
def past_random_date(start_years_from_now, end_years_from_now):
    return random_date(-start_years_from_now, -end_years_from_now)
    
def future_random_date(start_years_from_now, end_years_from_now):
    """
    Function returns random date in a period. Where: 
        - starting date is today plus start_years_from_now
        - ending date is today plus end_years_from_now
    """
    return random_date(start_years_from_now, end_years_from_now)
    
def generate_unique_key(key_format, key_parts_generators, entity_type, num_of_tries):
    while True:
        key_parts_values = {}
        for k, v in  key_parts_generators.items():
            key_parts_values[k] = v[0](*v[1:])
        key_candidate = key_format.format(**key_parts_values)  
        if not GLOBAL_CACHE.probe(entity_type, key_candidate):
            return key_candidate
        num_of_tries -= 1
        if num_of_tries <= 0:
            raise Exception('Failed to generate unique key for: {0}'.format(entity_type))  

# File operations functions
def join_path(*path_components):
    return os.path.join(*path_components)
            
# Example section
def example_dir_path():
    import datagenerator.example.example as e
    example_dir = '.'
    if hasattr(e, '__path__'):
        example_dir = e.__path__[0]
    else:
        example_dir = e.__file__
    return os.path.dirname(example_dir)

# TODO: add possibility to plug-in module to object evaluation
def test_constant_uuid():
    return "398616f3-4fd8-4483-91c5-bea5933a7203"

def test_constant_name():
    return "James Gray"

def test_constant_seq10():
    return "NNTFRMNMZX"

def test_status():
    return "ACTIVE"

def test_constant_date():
    return "2020-02-03"
